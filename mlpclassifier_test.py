from MLPClassifier import FFNNLayer, MLPClassifier

layers = [
    FFNNLayer(3, 'softmax'),
]

weights = [
            [
                [0.1, 0.9, -0.1],
                [-0.2, 0.8, 0.2],
                [0.3, -0.7, 0.3],
                [0.4, 0.6, -0.4],
                [0.5, 0.5, 0.5],
                [-0.6, 0.4, 0.6],
                [-0.7, -0.3, 0.7],
                [0.8, 0.2, -0.8],
                [0.9, -0.1, 0.0]
            ]
        ]


expected_weights = [
            [
                [ 0.12674605,  0.9149538,  -0.14169985],
                [-0.33551647,  0.67700488,  0.45851159],
                [ 0.48314436, -0.85241216,  0.2692678 ],
                [ 0.3400255,   0.57237542, -0.31240092],
                [ 0.31397716,  0.46349737,  0.72252547],
                [-0.69652442,  0.4789189,   0.61760552],
                [-0.50884515, -0.36354141,  0.57238656],
                [ 0.41891295,  0.26354517, -0.48245812],
                [ 0.90374164, -0.01759501, -0.08614663]
            ]
        ]
mlp = MLPClassifier(layers, 0.01, 0.05, 10, 1, weights, "max_iteration", expected_weights)

x = [
            [-2.4, -2.78, -0.6, 0.37, 2.46, -0.92, 2.76, 2.62],
            [-1.79, 1.65, -0.77, -1.03, 0.1, 2.12, -2.36, 1.25],
            [1.65, 2.34, 0.27, 2.34, 0.52, 1.37, 1.77, 0.62]
        ]

y = [
            [0, 1, 0],
            [1, 0, 0],
            [0, 0, 1]
        ]

mlp.fit(x, y)